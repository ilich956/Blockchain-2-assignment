import type { CeramicClient } from '@ceramicnetwork/http-client';
import type { DIDDataStore } from '@glazed/did-datastore';
import type { ModelTypeAliases } from '@glazed/types';
import { Core } from '@self.id/core';
import type { CoreModelTypes, CoreParams } from '@self.id/core';
import { QueryClient } from 'react-query';
import type { RequestState } from './types.js';
/** Extract the possible viewer ID value from the given cookie string value. */
export declare function getCookieViewerID(cookie?: string): string | null;
export declare type RequestClientParams<ModelTypes extends ModelTypeAliases = CoreModelTypes> = CoreParams<ModelTypes> & {
    /** Request cookie string to parse in order to extract the viewer ID. */
    cookie?: string;
};
/**
 * The RequestClient extends the {@linkcode core.Core Core} class as a server-side client for
 * prefetching and serializing records so they can be hydrated on the browser side.
 *
 * It is exported by the {@linkcode react} module.
 *
 * ```sh
 * import { RequestClient } from '@self.id/react'
 * ```
 */
export declare class RequestClient<ModelTypes extends ModelTypeAliases = CoreModelTypes, Alias extends keyof ModelTypes['definitions'] = keyof ModelTypes['definitions']> extends Core<ModelTypes> {
    #private;
    /** @internal */
    _ceramic: CeramicClient;
    /** @internal */
    _dataStore: DIDDataStore<ModelTypes>;
    /** @internal */
    _queryClient: QueryClient;
    constructor(params: RequestClientParams<ModelTypes>);
    /** Viewer ID associated to the request, if found in cookie string. */
    get viewerID(): string | null;
    /** Prefetch loading a record so it can be exported using {@linkcode getState}. */
    prefetch<Key extends Alias>(key: Key, id?: string | null): Promise<boolean>;
    /**
     * Return a serialized request state possibly containing the current viewer ID and prefetched
     * records so they can be injected on the browser side, notably in the {@linkcode Provider}.
     */
    getState(): RequestState;
}
