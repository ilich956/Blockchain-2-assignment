function _checkPrivateRedeclaration(obj, privateCollection) {
    if (privateCollection.has(obj)) {
        throw new TypeError("Cannot initialize the same private elements twice on an object");
    }
}
function _classApplyDescriptorGet(receiver, descriptor) {
    if (descriptor.get) {
        return descriptor.get.call(receiver);
    }
    return descriptor.value;
}
function _classApplyDescriptorSet(receiver, descriptor, value) {
    if (descriptor.set) {
        descriptor.set.call(receiver, value);
    } else {
        if (!descriptor.writable) {
            throw new TypeError("attempted to set read only private field");
        }
        descriptor.value = value;
    }
}
function _classExtractFieldDescriptor(receiver, privateMap, action) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to " + action + " private field on non-instance");
    }
    return privateMap.get(receiver);
}
function _classPrivateFieldGet(receiver, privateMap) {
    var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get");
    return _classApplyDescriptorGet(receiver, descriptor);
}
function _classPrivateFieldInit(obj, privateMap, value) {
    _checkPrivateRedeclaration(obj, privateMap);
    privateMap.set(obj, value);
}
function _classPrivateFieldSet(receiver, privateMap, value) {
    var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set");
    _classApplyDescriptorSet(receiver, descriptor, value);
    return value;
}
import { Core } from '@self.id/core';
var _params = /*#__PURE__*/ new WeakMap();
/**
 * ReactClient extends the {@linkcode core.Core Core class} with authentication support in browser
 * environments.
 *
 * It is exported by the {@linkcode react} module.
 *
 * ```sh
 * import { ReactClient } from '@self.id/react'
 * ```
 */ export class ReactClient extends Core {
    /**
   * Create a {@linkcode web.SelfID SelfID} instance using the given `authProvider` and attach the
   * associated DID instance to the internal Ceramic client instance.
   */ async authenticate(authProvider, sessionStr) {
        const { SelfID  } = await import('@self.id/web');
        const selfID = await SelfID.authenticate({
            ..._classPrivateFieldGet(this, _params),
            authProvider,
            sessionStr
        });
        // We need to attach the authenticated DID to the client instance to ensure streams can be updated
        this.ceramic.did = selfID.did;
        return selfID;
    }
    constructor(params){
        super(params);
        _classPrivateFieldInit(this, _params, {
            writable: true,
            value: void 0
        });
        _classPrivateFieldSet(this, _params, params);
    }
}
