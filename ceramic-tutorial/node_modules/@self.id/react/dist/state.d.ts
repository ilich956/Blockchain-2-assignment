import { PublicID } from '@self.id/core';
import type { SelfID } from '@self.id/web';
import { ReactClient } from './client.js';
import type { ViewerConnectionState } from './types.js';
/** @internal */
export declare const stateScope: unique symbol;
/** @internal */
export declare const DEFAULT_CLIENT_CONFIG: {
    ceramic: import("@self.id/core").CeramicNetwork;
    connectNetwork: import("@self.id/web").ConnectNetwork;
};
/** @internal */
export declare const clientAtom: import("jotai").PrimitiveAtom<ReactClient<any>> & {
    init: ReactClient<any>;
};
/** @internal */
export declare const connectionAtom: import("jotai").PrimitiveAtom<ViewerConnectionState<any>> & {
    init: ViewerConnectionState<any>;
};
/**
 * Viewer ID can be injected by server
 *
 * @internal */
export declare const requestViewerIDAtom: import("jotai").PrimitiveAtom<string | null> & {
    init: string | null;
};
/**
 * Store known viewer ID locally
 *
 * @internal */
export declare const localViewerIDAtom: import("jotai").WritableAtom<string | null, typeof import("jotai/utils").RESET | (string | ((prev: string | null) => string | null) | null), void>;
/**
 * High-level viewer access
 *
 * @internal */
export declare const viewerIDAtom: import("jotai").WritableAtom<SelfID<any, string | number | symbol> | PublicID<any, string | number | symbol> | null, SelfID<any, string | number | symbol> | null, void>;
