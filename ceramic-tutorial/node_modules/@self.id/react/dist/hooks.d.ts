import type { DefinitionContentType } from '@glazed/did-datastore';
import type { ModelTypeAliases } from '@glazed/types';
import { PublicID } from '@self.id/core';
import type { CoreModelTypes } from '@self.id/core';
import type { EthereumAuthProvider, SelfID } from '@self.id/web';
import type { ReactClient } from './client.js';
import type { ViewerConnectionState } from './types.js';
export declare function useClient<ModelTypes extends ModelTypeAliases = CoreModelTypes>(): ReactClient<ModelTypes>;
/**
 * A ViewerID can be either a {@linkcode web.SelfID SelfID} or {@linkcode core.PublicID PublicID}
 * instance depending on the current {@linkcode ViewerConnectionState}.
 */
export declare type ViewerID<ModelTypes extends ModelTypeAliases> = PublicID<ModelTypes> | SelfID<ModelTypes>;
export declare function useViewerID<ModelTypes extends ModelTypeAliases = CoreModelTypes>(): ViewerID<ModelTypes> | null;
/**
 * Hook for handling the viewer's connection lifecycle, returning the following elements:
 *
 * 1. The current {@linkcode ViewerConnectionState} object.
 * 2. A connection attempt function, taking an `EthereumAuthProvider` argument.
 * 3. A reset function, clearing the current {@linkcode ViewerID}.
 */
export declare function useViewerConnection<ModelTypes extends ModelTypeAliases = CoreModelTypes>(): [
    ViewerConnectionState<ModelTypes>,
    (provider: EthereumAuthProvider, sessionStr?: string) => Promise<SelfID<ModelTypes> | null>,
    () => void
];
/**
 * A ViewerRecord provides an interface for interacting with record stored on Ceramic, depending on
 * the current {@linkcode ViewerID} value:
 *
 * - If `null`, no interaction is possible with the record.
 * - If it is an instance of {@linkcode core.PublicID PublicID}, only reads are possible.
 * - If it is an instance of {@linkcode web.SelfID SelfID}, all interactions (reads and mutations)
 * are possible.
 *
 * The ViewerRecord object contains the following properties:
 *
 * - `isLoadable`: `false` if the viewer ID is `null`, `true` otherwise.
 * - `isLoading`: `true` when the record is being loaded, `false` otherwise.
 * - `content`: the record contents, if loaded.
 * - `isError`: `true` when the record failed to load, `false` otherwise.
 * - `error`: possible error raised when attempting to load the record.
 * - `isMutable`: `true` if the viewer ID is an instance of {@linkcode web.SelfID SelfID},
 * `false` otherwise.
 * - `isMutating`: `true` when the record is being mutated as the result of calling the
 * ViewerRecord object `merge` or `set` function, `false` otherwise.
 * - `set`: function used to replace the record contents using the {@linkcode web.SelfID.set set}
 * method, only available if `isMutating` is `true`.
 * - `merge`: function used to merge the record contents using the
 * {@linkcode web.SelfID.merge merge} method, only available if `isMutating` is `true`.
 */
export declare type ViewerRecord<ContentType> = {
    isLoadable: false;
    isLoading: false;
    content?: never;
    isError: false;
    error?: never;
    isMutable: false;
    isMutating: false;
    set?: never;
    merge?: never;
} | {
    isLoadable: true;
    isLoading: boolean;
    content?: ContentType;
    isError: boolean;
    error?: unknown;
    isMutable: boolean;
    isMutating: boolean;
    set(content: ContentType): Promise<void>;
    merge(content: ContentType): Promise<void>;
};
/**
 * Hook for accessing the {@linkcode ViewerRecord} for a given alias.
 */
export declare function useViewerRecord<ModelTypes extends ModelTypeAliases = CoreModelTypes, Alias extends keyof ModelTypes['definitions'] = keyof ModelTypes['definitions'], ContentType = DefinitionContentType<ModelTypes, Alias>>(alias: Alias): ViewerRecord<ContentType | null>;
/**
 * A PublicRecord provides an interface for interacting with record stored on Ceramic, associated
 * to a given DID string.
 */
export declare type PublicRecord<ContentType> = {
    /** `true` when the record is being loaded, `false` otherwise. */
    isLoading: boolean;
    /** Record contents, if loaded. */
    content?: ContentType;
    /** `true` when the record failed to load, `false` otherwise. */
    isError: boolean;
    /** Possible error raised when attempting to load the record. */
    error?: unknown;
};
/**
 * Hook for accessing the {@linkcode PublicRecord} for a given alias and account (DID or CAIP-10).
 */
export declare function usePublicRecord<ModelTypes extends ModelTypeAliases = CoreModelTypes, Alias extends keyof ModelTypes['definitions'] = keyof ModelTypes['definitions'], ContentType = DefinitionContentType<ModelTypes, Alias>>(alias: Alias, id: string): PublicRecord<ContentType | null>;
