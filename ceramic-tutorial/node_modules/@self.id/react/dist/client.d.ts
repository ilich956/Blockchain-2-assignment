import type { CeramicClient } from '@ceramicnetwork/http-client';
import type { DIDDataStore } from '@glazed/did-datastore';
import type { ModelTypeAliases } from '@glazed/types';
import { Core, type CoreModelTypes } from '@self.id/core';
import type { EthereumAuthProvider, SelfID, WebClientParams } from '@self.id/web';
/**
 * ReactClient extends the {@linkcode core.Core Core class} with authentication support in browser
 * environments.
 *
 * It is exported by the {@linkcode react} module.
 *
 * ```sh
 * import { ReactClient } from '@self.id/react'
 * ```
 */
export declare class ReactClient<ModelTypes extends ModelTypeAliases = CoreModelTypes> extends Core<ModelTypes> {
    #private;
    /** @internal */
    _ceramic: CeramicClient;
    /** @internal */
    _dataStore: DIDDataStore<ModelTypes>;
    constructor(params: WebClientParams<ModelTypes>);
    /**
     * Create a {@linkcode web.SelfID SelfID} instance using the given `authProvider` and attach the
     * associated DID instance to the internal Ceramic client instance.
     */
    authenticate(authProvider: EthereumAuthProvider, sessionStr?: string): Promise<SelfID<ModelTypes>>;
}
