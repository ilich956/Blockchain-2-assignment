import { getCookieValue } from './utils.js';
/** @internal */ export const canUseBrowserCookie = typeof document !== 'undefined' && 'cookie' in document;
/** @internal */ export function getBrowserCookie(name, fallback) {
    return canUseBrowserCookie ? getCookieValue(document.cookie, name, fallback) : fallback;
}
/** @internal */ export function setBrowserCookie(name, value, options = {}) {
    if (!canUseBrowserCookie) {
        return false;
    }
    document.cookie = `${name}=${encodeURIComponent(value)}; max-age=${options.maxAge ?? 2592000 // 30 day
    }; path=${options.path ?? '/'}; SameSite=Strict`;
    return true;
}
/** @internal */ export function deleteBrowserCookie(name, path = '/') {
    if (!canUseBrowserCookie) {
        return false;
    }
    document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=${path}; SameSite=Strict`;
    return true;
}
/**
 * Implements Jotai's Storage interface
 *
 * @internal
 */ export const CookieStorage = {
    getItem: (key)=>getBrowserCookie(key) ?? null,
    setItem: (key, value)=>{
        if (value == null) {
            deleteBrowserCookie(key);
        } else {
            setBrowserCookie(key, value);
        }
    },
    removeItem: (key)=>{
        deleteBrowserCookie(key);
    }
};
