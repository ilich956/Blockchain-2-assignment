function _checkPrivateRedeclaration(obj, privateCollection) {
    if (privateCollection.has(obj)) {
        throw new TypeError("Cannot initialize the same private elements twice on an object");
    }
}
function _classApplyDescriptorGet(receiver, descriptor) {
    if (descriptor.get) {
        return descriptor.get.call(receiver);
    }
    return descriptor.value;
}
function _classApplyDescriptorSet(receiver, descriptor, value) {
    if (descriptor.set) {
        descriptor.set.call(receiver, value);
    } else {
        if (!descriptor.writable) {
            throw new TypeError("attempted to set read only private field");
        }
        descriptor.value = value;
    }
}
function _classExtractFieldDescriptor(receiver, privateMap, action) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to " + action + " private field on non-instance");
    }
    return privateMap.get(receiver);
}
function _classPrivateFieldGet(receiver, privateMap) {
    var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get");
    return _classApplyDescriptorGet(receiver, descriptor);
}
function _classPrivateFieldInit(obj, privateMap, value) {
    _checkPrivateRedeclaration(obj, privateMap);
    privateMap.set(obj, value);
}
function _classPrivateFieldSet(receiver, privateMap, value) {
    var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set");
    _classApplyDescriptorSet(receiver, descriptor, value);
    return value;
}
import { Core } from '@self.id/core';
import { dehydrate, QueryClient } from 'react-query';
import { VIEWER_ID_STORAGE_KEY } from './constants.js';
import { getCookieValue } from './utils.js';
/** Extract the possible viewer ID value from the given cookie string value. */ export function getCookieViewerID(cookie) {
    return cookie && getCookieValue(cookie, VIEWER_ID_STORAGE_KEY) || null;
}
var _viewerID = /*#__PURE__*/ new WeakMap();
/**
 * The RequestClient extends the {@linkcode core.Core Core} class as a server-side client for
 * prefetching and serializing records so they can be hydrated on the browser side.
 *
 * It is exported by the {@linkcode react} module.
 *
 * ```sh
 * import { RequestClient } from '@self.id/react'
 * ```
 */ export class RequestClient extends Core {
    /** Viewer ID associated to the request, if found in cookie string. */ get viewerID() {
        return _classPrivateFieldGet(this, _viewerID);
    }
    /** Prefetch loading a record so it can be exported using {@linkcode getState}. */ async prefetch(key, id = _classPrivateFieldGet(this, _viewerID)) {
        if (id == null) {
            return false;
        }
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
        await this._queryClient.prefetchQuery([
            id,
            key
        ], async ()=>await this.get(key, id));
        return true;
    }
    /**
   * Return a serialized request state possibly containing the current viewer ID and prefetched
   * records so they can be injected on the browser side, notably in the {@linkcode Provider}.
   */ getState() {
        return {
            hydrate: dehydrate(this._queryClient),
            viewerID: _classPrivateFieldGet(this, _viewerID)
        };
    }
    constructor(params){
        super(params);
        _classPrivateFieldInit(this, _viewerID, {
            writable: true,
            value: void 0
        });
        this._queryClient = new QueryClient();
        _classPrivateFieldSet(this, _viewerID, getCookieViewerID(params.cookie));
    }
}
